/* AS
To rename the columns generated by your queries, which is also known as aliasing. 
This is similar to how Python uses as for aliasing when doing imports like import pandas as pd.

To use AS in SQL, insert it right after the column you select. */
query = """
      SELECT Animal, COUNT(ID) AS Number
      FROM `bigquery-public-data.pet_records.pets`
      ORDER BY Animal
      """
/* These queries return the same information, but in the second query the column returned by the COUNT() function 
will be called Number, rather than the default name of f0__      

WITH ... AS
On its own, AS is a convenient way to clean up the data returned by your query. 
It's even more powerful when combined with WITH in what's called a "common table expression".

A common table expression (or CTE) is a temporary table that you return within your query. 
CTEs are helpful for splitting your queries into readable chunks, and you can write queries against them.

EX: Use the pets table to ask questions about older animals in particular. 
So you can start by creating a CTE which only contains information about animals more than five years old: */

query = """
      WITH Seniors AS
      (
          SELECT ID, Name
          FROM `bigquery-public-data.pet_records.pets`
          WHERE Years_old > 5
      )
      SELECT ID
      FROM Seniors
      """

/* Also, it's important to note that CTEs only exist inside the query where you create them, and you can't reference 
them in later queries. So, any query that uses a CTE is always broken into two parts: 
(1) first, we create the CTE
(2) then, we write a query that uses the CTE.
